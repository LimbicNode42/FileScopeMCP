# Docker Compose for FileScopeMCP
# Production-ready setup for containerized deployment

version: '3.8'

services:
  # FileScopeMCP Application
  filescope-mcp:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: filescope-mcp
    restart: unless-stopped
    
    # Environment configuration
    env_file:
      - .env
    environment:
      # Runtime Environment
      NODE_ENV: ${NODE_ENV:-production}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-3000}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # HTTP Server Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      ENABLE_DNS_REBINDING_PROTECTION: ${ENABLE_DNS_REBINDING_PROTECTION:-false}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-127.0.0.1,localhost}
      REQUEST_TIMEOUT_MS: ${REQUEST_TIMEOUT_MS:-30000}
      
      # File Processing Configuration
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-10}
      EXCLUDED_EXTENSIONS: ${EXCLUDED_EXTENSIONS:-.log,.tmp,.cache}
      EXCLUDED_DIRECTORIES: ${EXCLUDED_DIRECTORIES:-node_modules,.git,dist,build}
      MAX_CONCURRENT_FILES: ${MAX_CONCURRENT_FILES:-100}
      
      # MCP Server Configuration
      MCP_SERVER_NAME: ${MCP_SERVER_NAME:-FileScopeMCP}
      MCP_SERVER_VERSION: ${MCP_SERVER_VERSION:-1.0.0}
    
    # Port mapping
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    
    # Volume mounts
    volumes:
      # Mount your workspace/codebase here (read-only for analysis)
      - ${WORKSPACE_PATH:?Please set WORKSPACE_PATH}:/workspace:ro
      
      # Optional: Mount specific project directory
      - ${PROJECT_PATH:-./example-project}:/project:ro
      
      # Persistent data for file trees and configurations
      - ${DATA_PATH:-filescope_data}:/app/data
      
      # Optional: Mount custom configuration
      - ${CONFIG_PATH:-./config}:/app/config:ro
    
    # Network configuration
    networks:
      - filescope
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

# Named volumes for persistent data
volumes:
  filescope_data:
    driver: local

# Network configuration
networks:
  filescope:
    driver: bridge
